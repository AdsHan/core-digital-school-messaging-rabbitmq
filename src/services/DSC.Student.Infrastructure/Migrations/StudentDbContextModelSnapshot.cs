// <auto-generated />
using System;
using DSC.Student.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DSC.Student.Infrastructure.Migrations
{
    [DbContext(typeof(StudentDbContext))]
    partial class StudentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DSC.Student.Domain.Entities.AdressModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Complement")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("DateCreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("DSC.Student.Domain.Entities.CourseModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("NoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NoteId")
                        .IsUnique()
                        .HasFilter("[NoteId] IS NOT NULL");

                    b.HasIndex("SchoolId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("DSC.Student.Domain.Entities.DayNoteModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataNote")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(8000)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("DaysNotes");
                });

            modelBuilder.Entity("DSC.Student.Domain.Entities.GuardianModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("NoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NoteId")
                        .IsUnique()
                        .HasFilter("[NoteId] IS NOT NULL");

                    b.ToTable("Guardians");
                });

            modelBuilder.Entity("DSC.Student.Domain.Entities.NoteModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(8000)");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("DSC.Student.Domain.Entities.SchoolModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorporateName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("DateCreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("NoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TradeName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AdressId")
                        .IsUnique()
                        .HasFilter("[AdressId] IS NOT NULL");

                    b.HasIndex("NoteId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("DSC.Student.Domain.Entities.StudentGuardianModel", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GuardianId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentId", "GuardianId");

                    b.HasIndex("GuardianId");

                    b.ToTable("StudentsGuardian");
                });

            modelBuilder.Entity("DSC.Student.Domain.Entities.StudentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AuthCreate")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmailAuthSend")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("NoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdressId")
                        .IsUnique()
                        .HasFilter("[AdressId] IS NOT NULL");

                    b.HasIndex("CourseId");

                    b.HasIndex("NoteId")
                        .IsUnique()
                        .HasFilter("[NoteId] IS NOT NULL");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DSC.Student.Domain.Entities.CourseModel", b =>
                {
                    b.HasOne("DSC.Student.Domain.Entities.NoteModel", "Note")
                        .WithOne()
                        .HasForeignKey("DSC.Student.Domain.Entities.CourseModel", "NoteId");

                    b.HasOne("DSC.Student.Domain.Entities.SchoolModel", "School")
                        .WithMany("Courses")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Note");

                    b.Navigation("School");
                });

            modelBuilder.Entity("DSC.Student.Domain.Entities.DayNoteModel", b =>
                {
                    b.HasOne("DSC.Student.Domain.Entities.StudentModel", "Student")
                        .WithMany("DayNotes")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DSC.Student.Domain.Entities.GuardianModel", b =>
                {
                    b.HasOne("DSC.Student.Domain.Entities.NoteModel", "Note")
                        .WithOne()
                        .HasForeignKey("DSC.Student.Domain.Entities.GuardianModel", "NoteId");

                    b.OwnsOne("DSC.Core.DomainObjects.Cpf", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("GuardianModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("varchar(11)")
                                .HasColumnName("Cpf");

                            b1.HasKey("GuardianModelId");

                            b1.ToTable("Guardians");

                            b1.WithOwner()
                                .HasForeignKey("GuardianModelId");
                        });

                    b.OwnsOne("DSC.Core.DomainObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("GuardianModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(254)
                                .HasColumnType("varchar(254)")
                                .HasColumnName("Email");

                            b1.HasKey("GuardianModelId");

                            b1.ToTable("Guardians");

                            b1.WithOwner()
                                .HasForeignKey("GuardianModelId");
                        });

                    b.OwnsOne("DSC.Core.DomainObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("GuardianModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(13)
                                .HasColumnType("varchar(13)")
                                .HasColumnName("CellPhone");

                            b1.HasKey("GuardianModelId");

                            b1.ToTable("Guardians");

                            b1.WithOwner()
                                .HasForeignKey("GuardianModelId");
                        });

                    b.OwnsOne("DSC.Core.DomainObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("GuardianModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(13)
                                .HasColumnType("varchar(13)")
                                .HasColumnName("Phone");

                            b1.HasKey("GuardianModelId");

                            b1.ToTable("Guardians");

                            b1.WithOwner()
                                .HasForeignKey("GuardianModelId");
                        });

                    b.OwnsOne("DSC.Core.DomainObjects.Rg", "Rg", b1 =>
                        {
                            b1.Property<Guid>("GuardianModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .HasMaxLength(10)
                                .HasColumnType("varchar(10)")
                                .HasColumnName("Rg");

                            b1.HasKey("GuardianModelId");

                            b1.ToTable("Guardians");

                            b1.WithOwner()
                                .HasForeignKey("GuardianModelId");
                        });

                    b.Navigation("CellPhone");

                    b.Navigation("Cpf");

                    b.Navigation("Email");

                    b.Navigation("Note");

                    b.Navigation("Phone");

                    b.Navigation("Rg");
                });

            modelBuilder.Entity("DSC.Student.Domain.Entities.SchoolModel", b =>
                {
                    b.HasOne("DSC.Student.Domain.Entities.AdressModel", "Adress")
                        .WithOne()
                        .HasForeignKey("DSC.Student.Domain.Entities.SchoolModel", "AdressId");

                    b.HasOne("DSC.Student.Domain.Entities.NoteModel", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId");

                    b.OwnsOne("DSC.Core.DomainObjects.Cnpj", "Cnpj", b1 =>
                        {
                            b1.Property<Guid>("SchoolModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("varchar(14)")
                                .HasColumnName("Cpnj");

                            b1.HasKey("SchoolModelId");

                            b1.ToTable("Schools");

                            b1.WithOwner()
                                .HasForeignKey("SchoolModelId");
                        });

                    b.OwnsOne("DSC.Core.DomainObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("SchoolModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(254)
                                .HasColumnType("varchar(254)")
                                .HasColumnName("Email");

                            b1.HasKey("SchoolModelId");

                            b1.ToTable("Schools");

                            b1.WithOwner()
                                .HasForeignKey("SchoolModelId");
                        });

                    b.OwnsOne("DSC.Core.DomainObjects.Phone", "CellPhone", b1 =>
                        {
                            b1.Property<Guid>("SchoolModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(13)
                                .HasColumnType("varchar(13)")
                                .HasColumnName("CellPhone");

                            b1.HasKey("SchoolModelId");

                            b1.ToTable("Schools");

                            b1.WithOwner()
                                .HasForeignKey("SchoolModelId");
                        });

                    b.OwnsOne("DSC.Core.DomainObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("SchoolModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(13)
                                .HasColumnType("varchar(13)")
                                .HasColumnName("Phone");

                            b1.HasKey("SchoolModelId");

                            b1.ToTable("Schools");

                            b1.WithOwner()
                                .HasForeignKey("SchoolModelId");
                        });

                    b.Navigation("Adress");

                    b.Navigation("CellPhone");

                    b.Navigation("Cnpj");

                    b.Navigation("Email");

                    b.Navigation("Note");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("DSC.Student.Domain.Entities.StudentGuardianModel", b =>
                {
                    b.HasOne("DSC.Student.Domain.Entities.GuardianModel", "Guardian")
                        .WithMany("StudentsGuardians")
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DSC.Student.Domain.Entities.StudentModel", "Student")
                        .WithMany("StudentsGuardians")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Guardian");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DSC.Student.Domain.Entities.StudentModel", b =>
                {
                    b.HasOne("DSC.Student.Domain.Entities.AdressModel", "Adress")
                        .WithOne()
                        .HasForeignKey("DSC.Student.Domain.Entities.StudentModel", "AdressId");

                    b.HasOne("DSC.Student.Domain.Entities.CourseModel", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DSC.Student.Domain.Entities.NoteModel", "Note")
                        .WithOne()
                        .HasForeignKey("DSC.Student.Domain.Entities.StudentModel", "NoteId");

                    b.OwnsOne("DSC.Core.DomainObjects.Cpf", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("StudentModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("varchar(11)")
                                .HasColumnName("Cpf");

                            b1.HasKey("StudentModelId");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentModelId");
                        });

                    b.OwnsOne("DSC.Core.DomainObjects.Rg", "Rg", b1 =>
                        {
                            b1.Property<Guid>("StudentModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .HasMaxLength(10)
                                .HasColumnType("varchar(10)")
                                .HasColumnName("Rg");

                            b1.HasKey("StudentModelId");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentModelId");
                        });

                    b.Navigation("Adress");

                    b.Navigation("Course");

                    b.Navigation("Cpf");

                    b.Navigation("Note");

                    b.Navigation("Rg");
                });

            modelBuilder.Entity("DSC.Student.Domain.Entities.CourseModel", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("DSC.Student.Domain.Entities.GuardianModel", b =>
                {
                    b.Navigation("StudentsGuardians");
                });

            modelBuilder.Entity("DSC.Student.Domain.Entities.SchoolModel", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("DSC.Student.Domain.Entities.StudentModel", b =>
                {
                    b.Navigation("DayNotes");

                    b.Navigation("StudentsGuardians");
                });
#pragma warning restore 612, 618
        }
    }
}
